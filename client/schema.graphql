"""All input for the `acceptInvite` mutation."""
input AcceptInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  inviteId: UUID
  currentuserid: UUID
}

"""The output of our `acceptInvite` mutation."""
type AcceptInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  uuid: UUID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Invite` mutation."""
input CreateInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Invite` to be created by this mutation."""
  invite: InviteInput!
}

"""The output of our create `Invite` mutation."""
type CreateInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invite` that was created by this mutation."""
  invite: Invite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Invite`."""
  userByUserid: User

  """Reads a single `Match` that is related to this `Invite`."""
  matchByMatchid: Match

  """An edge for our `Invite`. May be used by Relay 1."""
  inviteEdge(
    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = PRIMARY_KEY_ASC
  ): InvitesEdge
}

"""All input for the create `JoinedMatch` mutation."""
input CreateJoinedMatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `JoinedMatch` to be created by this mutation."""
  joinedMatch: JoinedMatchInput!
}

"""The output of our create `JoinedMatch` mutation."""
type CreateJoinedMatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JoinedMatch` that was created by this mutation."""
  joinedMatch: JoinedMatch

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Match` that is related to this `JoinedMatch`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `JoinedMatch`."""
  userByUserid: User

  """An edge for our `JoinedMatch`. May be used by Relay 1."""
  joinedMatchEdge(
    """The method to use when ordering `JoinedMatch`."""
    orderBy: [JoinedMatchesOrderBy!] = PRIMARY_KEY_ASC
  ): JoinedMatchesEdge
}

"""All input for the create `Match` mutation."""
input CreateMatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Match` to be created by this mutation."""
  match: MatchInput!
}

"""The output of our create `Match` mutation."""
type CreateMatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Match` that was created by this mutation."""
  match: Match

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Match`."""
  userByUserid: User

  """Reads a single `Team` that is related to this `Match`."""
  teamByHostid: Team

  """Reads a single `Team` that is related to this `Match`."""
  teamByGuestid: Team

  """An edge for our `Match`. May be used by Relay 1."""
  matchEdge(
    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = PRIMARY_KEY_ASC
  ): MatchesEdge
}

"""All input for the create `Prediction` mutation."""
input CreatePredictionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Prediction` to be created by this mutation."""
  prediction: PredictionInput!
}

"""The output of our create `Prediction` mutation."""
type CreatePredictionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Prediction` that was created by this mutation."""
  prediction: Prediction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Match` that is related to this `Prediction`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `Prediction`."""
  userByUserid: User

  """An edge for our `Prediction`. May be used by Relay 1."""
  predictionEdge(
    """The method to use when ordering `Prediction`."""
    orderBy: [PredictionsOrderBy!] = PRIMARY_KEY_ASC
  ): PredictionsEdge
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Team` to be created by this mutation."""
  team: TeamInput!
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was created by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteInviteById` mutation."""
input DeleteInviteByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteInvite` mutation."""
input DeleteInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invite` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Invite` mutation."""
type DeleteInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invite` that was deleted by this mutation."""
  invite: Invite
  deletedInviteId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Invite`."""
  userByUserid: User

  """Reads a single `Match` that is related to this `Invite`."""
  matchByMatchid: Match

  """An edge for our `Invite`. May be used by Relay 1."""
  inviteEdge(
    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = PRIMARY_KEY_ASC
  ): InvitesEdge
}

"""All input for the `deleteJoinedMatchById` mutation."""
input DeleteJoinedMatchByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteJoinedMatch` mutation."""
input DeleteJoinedMatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JoinedMatch` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `JoinedMatch` mutation."""
type DeleteJoinedMatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JoinedMatch` that was deleted by this mutation."""
  joinedMatch: JoinedMatch
  deletedJoinedMatchId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Match` that is related to this `JoinedMatch`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `JoinedMatch`."""
  userByUserid: User

  """An edge for our `JoinedMatch`. May be used by Relay 1."""
  joinedMatchEdge(
    """The method to use when ordering `JoinedMatch`."""
    orderBy: [JoinedMatchesOrderBy!] = PRIMARY_KEY_ASC
  ): JoinedMatchesEdge
}

"""All input for the `deleteMatchById` mutation."""
input DeleteMatchByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteMatch` mutation."""
input DeleteMatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Match` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Match` mutation."""
type DeleteMatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Match` that was deleted by this mutation."""
  match: Match
  deletedMatchId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Match`."""
  userByUserid: User

  """Reads a single `Team` that is related to this `Match`."""
  teamByHostid: Team

  """Reads a single `Team` that is related to this `Match`."""
  teamByGuestid: Team

  """An edge for our `Match`. May be used by Relay 1."""
  matchEdge(
    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = PRIMARY_KEY_ASC
  ): MatchesEdge
}

"""All input for the `deletePredictionById` mutation."""
input DeletePredictionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deletePrediction` mutation."""
input DeletePredictionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Prediction` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Prediction` mutation."""
type DeletePredictionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Prediction` that was deleted by this mutation."""
  prediction: Prediction
  deletedPredictionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Match` that is related to this `Prediction`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `Prediction`."""
  userByUserid: User

  """An edge for our `Prediction`. May be used by Relay 1."""
  predictionEdge(
    """The method to use when ordering `Prediction`."""
    orderBy: [PredictionsOrderBy!] = PRIMARY_KEY_ASC
  ): PredictionsEdge
}

"""All input for the `deleteTeamById` mutation."""
input DeleteTeamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was deleted by this mutation."""
  team: Team
  deletedTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

type Invite implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userid: UUID!
  matchid: UUID!
  accepted: Boolean
  expiresin: Datetime

  """Reads a single `User` that is related to this `Invite`."""
  userByUserid: User

  """Reads a single `Match` that is related to this `Invite`."""
  matchByMatchid: Match
}

"""
A condition to be used against `Invite` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input InviteCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userid` field."""
  userid: UUID

  """Checks for equality with the object’s `matchid` field."""
  matchid: UUID

  """Checks for equality with the object’s `accepted` field."""
  accepted: Boolean

  """Checks for equality with the object’s `expiresin` field."""
  expiresin: Datetime
}

"""An input for mutations affecting `Invite`"""
input InviteInput {
  id: UUID
  userid: UUID!
  matchid: UUID!
  accepted: Boolean
  expiresin: Datetime
}

"""
Represents an update to a `Invite`. Fields that are set will be updated.
"""
input InvitePatch {
  id: UUID
  userid: UUID
  matchid: UUID
  accepted: Boolean
  expiresin: Datetime
}

"""A connection to a list of `Invite` values."""
type InvitesConnection {
  """A list of `Invite` objects."""
  nodes: [Invite]!

  """
  A list of edges which contains the `Invite` and cursor to aid in pagination.
  """
  edges: [InvitesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Invite` you could get from the connection."""
  totalCount: Int!
}

"""A `Invite` edge in the connection."""
type InvitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Invite` at the end of the edge."""
  node: Invite
}

"""Methods to use when ordering `Invite`."""
enum InvitesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERID_ASC
  USERID_DESC
  MATCHID_ASC
  MATCHID_DESC
  ACCEPTED_ASC
  ACCEPTED_DESC
  EXPIRESIN_ASC
  EXPIRESIN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `inviteUser` mutation."""
input InviteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID
  matchId: UUID
}

"""The output of our `inviteUser` mutation."""
type InviteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  uuid: UUID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type JoinedMatch implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  matchid: UUID!
  userid: UUID!
  joinedAt: Datetime
  leftAt: Datetime

  """Reads a single `Match` that is related to this `JoinedMatch`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `JoinedMatch`."""
  userByUserid: User
}

"""
A condition to be used against `JoinedMatch` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input JoinedMatchCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `matchid` field."""
  matchid: UUID

  """Checks for equality with the object’s `userid` field."""
  userid: UUID

  """Checks for equality with the object’s `joinedAt` field."""
  joinedAt: Datetime

  """Checks for equality with the object’s `leftAt` field."""
  leftAt: Datetime
}

"""A connection to a list of `JoinedMatch` values."""
type JoinedMatchesConnection {
  """A list of `JoinedMatch` objects."""
  nodes: [JoinedMatch]!

  """
  A list of edges which contains the `JoinedMatch` and cursor to aid in pagination.
  """
  edges: [JoinedMatchesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `JoinedMatch` you could get from the connection."""
  totalCount: Int!
}

"""A `JoinedMatch` edge in the connection."""
type JoinedMatchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JoinedMatch` at the end of the edge."""
  node: JoinedMatch
}

"""Methods to use when ordering `JoinedMatch`."""
enum JoinedMatchesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MATCHID_ASC
  MATCHID_DESC
  USERID_ASC
  USERID_DESC
  JOINED_AT_ASC
  JOINED_AT_DESC
  LEFT_AT_ASC
  LEFT_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `JoinedMatch`"""
input JoinedMatchInput {
  id: UUID
  matchid: UUID!
  userid: UUID!
  joinedAt: Datetime
  leftAt: Datetime
}

"""
Represents an update to a `JoinedMatch`. Fields that are set will be updated.
"""
input JoinedMatchPatch {
  id: UUID
  matchid: UUID
  userid: UUID
  joinedAt: Datetime
  leftAt: Datetime
}

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _username: String
  _password: String
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  uuid: UUID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Match implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  type: String!
  league: String!
  userid: UUID
  hostid: UUID
  guestid: UUID

  """Reads a single `User` that is related to this `Match`."""
  userByUserid: User

  """Reads a single `Team` that is related to this `Match`."""
  teamByHostid: Team

  """Reads a single `Team` that is related to this `Match`."""
  teamByGuestid: Team

  """Reads and enables pagination through a set of `Prediction`."""
  predictionsByMatchid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prediction`."""
    orderBy: [PredictionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PredictionCondition
  ): PredictionsConnection!

  """Reads and enables pagination through a set of `Invite`."""
  invitesByMatchid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteCondition
  ): InvitesConnection!

  """Reads and enables pagination through a set of `JoinedMatch`."""
  joinedMatchesByMatchid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JoinedMatch`."""
    orderBy: [JoinedMatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JoinedMatchCondition
  ): JoinedMatchesConnection!
}

"""
A condition to be used against `Match` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MatchCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `league` field."""
  league: String

  """Checks for equality with the object’s `userid` field."""
  userid: UUID

  """Checks for equality with the object’s `hostid` field."""
  hostid: UUID

  """Checks for equality with the object’s `guestid` field."""
  guestid: UUID
}

"""A connection to a list of `Match` values."""
type MatchesConnection {
  """A list of `Match` objects."""
  nodes: [Match]!

  """
  A list of edges which contains the `Match` and cursor to aid in pagination.
  """
  edges: [MatchesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Match` you could get from the connection."""
  totalCount: Int!
}

"""A `Match` edge in the connection."""
type MatchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Match` at the end of the edge."""
  node: Match
}

"""Methods to use when ordering `Match`."""
enum MatchesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  LEAGUE_ASC
  LEAGUE_DESC
  USERID_ASC
  USERID_DESC
  HOSTID_ASC
  HOSTID_DESC
  GUESTID_ASC
  GUESTID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Match`"""
input MatchInput {
  id: UUID
  type: String!
  league: String!
  userid: UUID
  hostid: UUID
  guestid: UUID
}

"""
Represents an update to a `Match`. Fields that are set will be updated.
"""
input MatchPatch {
  id: UUID
  type: String
  league: String
  userid: UUID
  hostid: UUID
  guestid: UUID
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Invite`."""
  createInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInviteInput!
  ): CreateInvitePayload

  """Creates a single `JoinedMatch`."""
  createJoinedMatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJoinedMatchInput!
  ): CreateJoinedMatchPayload

  """Creates a single `Match`."""
  createMatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMatchInput!
  ): CreateMatchPayload

  """Creates a single `Prediction`."""
  createPrediction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePredictionInput!
  ): CreatePredictionPayload

  """Creates a single `Team`."""
  createTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Invite` using its globally unique id and a patch."""
  updateInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInviteInput!
  ): UpdateInvitePayload

  """Updates a single `Invite` using a unique key and a patch."""
  updateInviteById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInviteByIdInput!
  ): UpdateInvitePayload

  """
  Updates a single `JoinedMatch` using its globally unique id and a patch.
  """
  updateJoinedMatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJoinedMatchInput!
  ): UpdateJoinedMatchPayload

  """Updates a single `JoinedMatch` using a unique key and a patch."""
  updateJoinedMatchById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJoinedMatchByIdInput!
  ): UpdateJoinedMatchPayload

  """Updates a single `Match` using its globally unique id and a patch."""
  updateMatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchInput!
  ): UpdateMatchPayload

  """Updates a single `Match` using a unique key and a patch."""
  updateMatchById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchByIdInput!
  ): UpdateMatchPayload

  """
  Updates a single `Prediction` using its globally unique id and a patch.
  """
  updatePrediction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePredictionInput!
  ): UpdatePredictionPayload

  """Updates a single `Prediction` using a unique key and a patch."""
  updatePredictionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePredictionByIdInput!
  ): UpdatePredictionPayload

  """Updates a single `Team` using its globally unique id and a patch."""
  updateTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByIdInput!
  ): UpdateTeamPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Deletes a single `Invite` using its globally unique id."""
  deleteInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInviteInput!
  ): DeleteInvitePayload

  """Deletes a single `Invite` using a unique key."""
  deleteInviteById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInviteByIdInput!
  ): DeleteInvitePayload

  """Deletes a single `JoinedMatch` using its globally unique id."""
  deleteJoinedMatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJoinedMatchInput!
  ): DeleteJoinedMatchPayload

  """Deletes a single `JoinedMatch` using a unique key."""
  deleteJoinedMatchById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJoinedMatchByIdInput!
  ): DeleteJoinedMatchPayload

  """Deletes a single `Match` using its globally unique id."""
  deleteMatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchInput!
  ): DeleteMatchPayload

  """Deletes a single `Match` using a unique key."""
  deleteMatchById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchByIdInput!
  ): DeleteMatchPayload

  """Deletes a single `Prediction` using its globally unique id."""
  deletePrediction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePredictionInput!
  ): DeletePredictionPayload

  """Deletes a single `Prediction` using a unique key."""
  deletePredictionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePredictionByIdInput!
  ): DeletePredictionPayload

  """Deletes a single `Team` using its globally unique id."""
  deleteTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByIdInput!
  ): DeleteTeamPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload
  acceptInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInviteInput!
  ): AcceptInvitePayload
  inviteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteUserInput!
  ): InviteUserPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Prediction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  matchid: UUID
  userid: UUID
  score: String!

  """Reads a single `Match` that is related to this `Prediction`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `Prediction`."""
  userByUserid: User
}

"""
A condition to be used against `Prediction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PredictionCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `matchid` field."""
  matchid: UUID

  """Checks for equality with the object’s `userid` field."""
  userid: UUID

  """Checks for equality with the object’s `score` field."""
  score: String
}

"""An input for mutations affecting `Prediction`"""
input PredictionInput {
  id: UUID
  matchid: UUID
  userid: UUID
  score: String!
}

"""
Represents an update to a `Prediction`. Fields that are set will be updated.
"""
input PredictionPatch {
  id: UUID
  matchid: UUID
  userid: UUID
  score: String
}

"""A connection to a list of `Prediction` values."""
type PredictionsConnection {
  """A list of `Prediction` objects."""
  nodes: [Prediction]!

  """
  A list of edges which contains the `Prediction` and cursor to aid in pagination.
  """
  edges: [PredictionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Prediction` you could get from the connection."""
  totalCount: Int!
}

"""A `Prediction` edge in the connection."""
type PredictionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Prediction` at the end of the edge."""
  node: Prediction
}

"""Methods to use when ordering `Prediction`."""
enum PredictionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MATCHID_ASC
  MATCHID_DESC
  USERID_ASC
  USERID_DESC
  SCORE_ASC
  SCORE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Invite`."""
  allInvites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteCondition
  ): InvitesConnection

  """Reads and enables pagination through a set of `JoinedMatch`."""
  allJoinedMatches(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JoinedMatch`."""
    orderBy: [JoinedMatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JoinedMatchCondition
  ): JoinedMatchesConnection

  """Reads and enables pagination through a set of `Match`."""
  allMatches(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchCondition
  ): MatchesConnection

  """Reads and enables pagination through a set of `Prediction`."""
  allPredictions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prediction`."""
    orderBy: [PredictionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PredictionCondition
  ): PredictionsConnection

  """Reads and enables pagination through a set of `Team`."""
  allTeams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): TeamsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  inviteById(id: UUID!): Invite
  joinedMatchById(id: UUID!): JoinedMatch
  matchById(id: UUID!): Match
  predictionById(id: UUID!): Prediction
  teamById(id: UUID!): Team
  userById(id: UUID!): User

  """Reads a single `Invite` using its globally unique `ID`."""
  invite(
    """The globally unique `ID` to be used in selecting a single `Invite`."""
    nodeId: ID!
  ): Invite

  """Reads a single `JoinedMatch` using its globally unique `ID`."""
  joinedMatch(
    """
    The globally unique `ID` to be used in selecting a single `JoinedMatch`.
    """
    nodeId: ID!
  ): JoinedMatch

  """Reads a single `Match` using its globally unique `ID`."""
  match(
    """The globally unique `ID` to be used in selecting a single `Match`."""
    nodeId: ID!
  ): Match

  """Reads a single `Prediction` using its globally unique `ID`."""
  prediction(
    """
    The globally unique `ID` to be used in selecting a single `Prediction`.
    """
    nodeId: ID!
  ): Prediction

  """Reads a single `Team` using its globally unique `ID`."""
  team(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  type: String!
  league: String!

  """Reads and enables pagination through a set of `Match`."""
  matchesByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchCondition
  ): MatchesConnection!

  """Reads and enables pagination through a set of `Match`."""
  matchesByGuestid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchCondition
  ): MatchesConnection!
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `league` field."""
  league: String
}

"""An input for mutations affecting `Team`"""
input TeamInput {
  id: UUID
  name: String!
  type: String!
  league: String!
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
  id: UUID
  name: String
  type: String
  league: String
}

"""A connection to a list of `Team` values."""
type TeamsConnection {
  """A list of `Team` objects."""
  nodes: [Team]!

  """
  A list of edges which contains the `Team` and cursor to aid in pagination.
  """
  edges: [TeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Team` you could get from the connection."""
  totalCount: Int!
}

"""A `Team` edge in the connection."""
type TeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Team` at the end of the edge."""
  node: Team
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  LEAGUE_ASC
  LEAGUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateInviteById` mutation."""
input UpdateInviteByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Invite` being updated.
  """
  invitePatch: InvitePatch!
  id: UUID!
}

"""All input for the `updateInvite` mutation."""
input UpdateInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Invite` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Invite` being updated.
  """
  invitePatch: InvitePatch!
}

"""The output of our update `Invite` mutation."""
type UpdateInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Invite` that was updated by this mutation."""
  invite: Invite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Invite`."""
  userByUserid: User

  """Reads a single `Match` that is related to this `Invite`."""
  matchByMatchid: Match

  """An edge for our `Invite`. May be used by Relay 1."""
  inviteEdge(
    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = PRIMARY_KEY_ASC
  ): InvitesEdge
}

"""All input for the `updateJoinedMatchById` mutation."""
input UpdateJoinedMatchByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JoinedMatch` being updated.
  """
  joinedMatchPatch: JoinedMatchPatch!
  id: UUID!
}

"""All input for the `updateJoinedMatch` mutation."""
input UpdateJoinedMatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JoinedMatch` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `JoinedMatch` being updated.
  """
  joinedMatchPatch: JoinedMatchPatch!
}

"""The output of our update `JoinedMatch` mutation."""
type UpdateJoinedMatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JoinedMatch` that was updated by this mutation."""
  joinedMatch: JoinedMatch

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Match` that is related to this `JoinedMatch`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `JoinedMatch`."""
  userByUserid: User

  """An edge for our `JoinedMatch`. May be used by Relay 1."""
  joinedMatchEdge(
    """The method to use when ordering `JoinedMatch`."""
    orderBy: [JoinedMatchesOrderBy!] = PRIMARY_KEY_ASC
  ): JoinedMatchesEdge
}

"""All input for the `updateMatchById` mutation."""
input UpdateMatchByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Match` being updated.
  """
  matchPatch: MatchPatch!
  id: UUID!
}

"""All input for the `updateMatch` mutation."""
input UpdateMatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Match` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Match` being updated.
  """
  matchPatch: MatchPatch!
}

"""The output of our update `Match` mutation."""
type UpdateMatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Match` that was updated by this mutation."""
  match: Match

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Match`."""
  userByUserid: User

  """Reads a single `Team` that is related to this `Match`."""
  teamByHostid: Team

  """Reads a single `Team` that is related to this `Match`."""
  teamByGuestid: Team

  """An edge for our `Match`. May be used by Relay 1."""
  matchEdge(
    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = PRIMARY_KEY_ASC
  ): MatchesEdge
}

"""All input for the `updatePredictionById` mutation."""
input UpdatePredictionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Prediction` being updated.
  """
  predictionPatch: PredictionPatch!
  id: UUID!
}

"""All input for the `updatePrediction` mutation."""
input UpdatePredictionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Prediction` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Prediction` being updated.
  """
  predictionPatch: PredictionPatch!
}

"""The output of our update `Prediction` mutation."""
type UpdatePredictionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Prediction` that was updated by this mutation."""
  prediction: Prediction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Match` that is related to this `Prediction`."""
  matchByMatchid: Match

  """Reads a single `User` that is related to this `Prediction`."""
  userByUserid: User

  """An edge for our `Prediction`. May be used by Relay 1."""
  predictionEdge(
    """The method to use when ordering `Prediction`."""
    orderBy: [PredictionsOrderBy!] = PRIMARY_KEY_ASC
  ): PredictionsEdge
}

"""All input for the `updateTeamById` mutation."""
input UpdateTeamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
  id: UUID!
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was updated by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = PRIMARY_KEY_ASC
  ): TeamsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: UUID!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  username: String!
  password: String!

  """Reads and enables pagination through a set of `Match`."""
  matchesByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Match`."""
    orderBy: [MatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchCondition
  ): MatchesConnection!

  """Reads and enables pagination through a set of `Prediction`."""
  predictionsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prediction`."""
    orderBy: [PredictionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PredictionCondition
  ): PredictionsConnection!

  """Reads and enables pagination through a set of `Invite`."""
  invitesByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invite`."""
    orderBy: [InvitesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteCondition
  ): InvitesConnection!

  """Reads and enables pagination through a set of `JoinedMatch`."""
  joinedMatchesByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JoinedMatch`."""
    orderBy: [JoinedMatchesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JoinedMatchCondition
  ): JoinedMatchesConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `password` field."""
  password: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: UUID
  username: String!
  password: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: UUID
  username: String
  password: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
